# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/team-strength.ipynb (unless otherwise specified).

__all__ = ['ModelABC', 'DCGoals', 'DCxG']

# Cell
import abc
import datetime as dt

import mezzala

import wingback.db

# Cell


class ModelABC:
    @abc.abstractmethod
    def fetch_data(self, league_ids, date):
        training_data = ...  # e.g. matches up-to, not including `date`
        test_data = ...      # matches on `date`
        return training_data, test_data

    @abc.abstractmethod
    def fit(self, data):
        return self

    @abc.abstractmethod
    def predict(self, data):
        predictions = ...
        return predictions

# Cell


class DCGoals(ModelABC):
    def __init__(self, time_window=dt.timedelta(days=360), epsilon=-0.0065):
        self.time_window = time_window
        self._model = mezzala.DixonColes(
            adapter=mezzala.KeyAdapter(
                home_goals='home_goals',
                away_goals='away_goals',
                home_team='home_team_id',  # Might be nicer to do a tuple of (ID, name)?
                away_team='away_team_id',
            ),
            blocks=[
                mezzala.blocks.BaseRate(),
                mezzala.blocks.TeamStrength(),
                mezzala.blocks.HomeAdvantage(),
            ],
            weight=mezzala.weights.ExponentialWeight(
                epsilon=epsilon,
                key=lambda x: x['days_ago']
            )
        )

    def fetch_data(self, league_ids, date):
        training_data = wingback.db.queries.fetch_matches(
            start=date-self.time_window,
            end=date,
            league_ids=league_ids,
            season_ids=[None]
        )
        test_data = wingback.db.queries.fetch_matches(
            start=date,
            end=date+dt.timedelta(days=1),
            league_ids=league_ids,
            season_ids=[None]
        )
        return list(training_data), list(test_data)

    def fit(self, data):
        self._model.fit(data)
        return self

    def predict(self, data):
        predictions = self._model.predict(data)
        return predictions

# Cell


class DCxG(ModelABC):
    def __init__(self):
        self._model = mezzala.DixonColes(
            adapter=...,
            blocks=[
                mezzala.blocks.BaseRate(),
                mezzala.blocks.TeamStrength(),
                mezzala.blocks.HomeAdvantage(),
            ],
            weight=mezzala.weights.KeyWeight(lambda x: x['probability'])
        )

    def fetch_data(self, date):
        training_data = ...  # e.g. matches up-to, not including `date`
        test_data = ...      # matches on `date`
        return training_data, test_data

    def fit(self, data):
        self._model.fit(data)
        return self

    def predict(self, data):
        base_predictions = self._model.predict(data)
        predictions = ... # flatten? add metadata?
        return predictions